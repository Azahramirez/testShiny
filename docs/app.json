[{"name":"app.R","content":"\r\n\r\nlibrary(shiny)\r\n# Function to multiply the first column of a data frame by 100\r\nm1c <- function(df,n) {\r\n  n=as.integer(n)\r\n  # Check if the data frame has at least one column\r\n  if (ncol(df) < 1) {\r\n    stop(\"The data frame must have at least one column.\")\r\n  }\r\n\r\n  # Multiply the first column by n\r\n  df[, 1] <- df[, 1] * n\r\n\r\n  # Return the modified data frame\r\n  return(df)\r\n}\r\n# Define UI for dataset viewer app ----\r\nui <- fluidPage(\r\n\r\n  # App title ----\r\n  titlePanel(\"Test for different variables inputs\"),\r\n\r\n  # Sidebar layout with input and output definitions ----\r\n  sidebarLayout(\r\n\r\n    # Sidebar panel for inputs ----\r\n    sidebarPanel(\r\n\r\n      # File input for CSV file upload\r\n      fileInput(\"file1\", \"Choose CSV File\",\r\n                multiple = FALSE,\r\n                accept = c(\"text/csv\",\r\n                           \"text/comma-separated-values,text/plain\",\r\n                           \".csv\")),\r\n\r\n      # Input: Text for providing a caption ----\r\n      # Note: Changes made to the caption in the textInput control\r\n      # are updated in the output area immediately as you type\r\n      textInput(inputId = \"caption\",\r\n                label = \"Caption:\",\r\n                value = \"Data Summary\"),\r\n\r\n      # Input: Selector for choosing dataset ----\r\n      selectInput(inputId = \"dataset\",\r\n                  label = \"Choose a dataset:\",\r\n                  choices = c(\"rock\", \"pressure\", \"cars\",\"multiply\")),\r\n\r\n      # Input: Numeric entry for number of obs to view ----\r\n      numericInput(inputId = \"obs\",\r\n                   label = \"Number of observations to view:\",\r\n                   value = 10),\r\n\r\n      selectInput(\r\n        \"select\",\r\n        \"Select options below:\",\r\n        list(\"Choice 1A\" = 0, \"Choice 1B\" = 10, \"Choice 1C\" = 100),\r\n        multiple = FALSE\r\n      ),\r\n\r\n\r\n    ),\r\n\r\n    # Main panel for displaying outputs ----\r\n    mainPanel(\r\n\r\n      # Output: Formatted text for caption ----\r\n      h3(textOutput(\"caption\", container = span)),\r\n\r\n\r\n\r\n      # Output: Verbatim text for data summary ----\r\n      verbatimTextOutput(\"summary\"),\r\n\r\n      # Output: HTML table with requested number of observations ----\r\n      tableOutput(\"view\"),\r\n\r\n\r\n\r\n      # Table output to display the contents of the uploaded file\r\n      tableOutput(\"contents\")\r\n\r\n    )\r\n  )\r\n)\r\n\r\n# Define server logic to summarize and view selected dataset ----\r\nserver <- function(input, output) {\r\n\r\n  # Return the requested dataset ----\r\n  # By declaring datasetInput as a reactive expression we ensure\r\n  # that:\r\n  #\r\n  # 1. It is only called when the inputs it depends on changes\r\n  # 2. The computation and result are shared by all the callers,\r\n  #    i.e. it only executes a single time\r\n  datasetInput <- reactive({\r\n    switch(input$dataset,\r\n           \"rock\" = m1c(rock,input$select),\r\n           \"pressure\" = pressure,\r\n           \"cars\" = cars)\r\n\r\n  })\r\n\r\n#\r\n\r\n\r\n  output$file1_contents <- renderPrint({print(input$file1)})\r\n\r\n  output$contents <- renderTable({\r\n    file <- input$file1\r\n    req(file)\r\n\r\n    ext <- tools::file_ext(file$datapath)\r\n    validate(need(ext == \"csv\", \"Please upload a csv file\"))\r\n\r\n    read.csv(file$datapath)\r\n  })\r\n\r\n  # Create caption ----\r\n  # The output$caption is computed based on a reactive expression\r\n  # that returns input$caption. When the user changes the\r\n  # \"caption\" field:\r\n  #\r\n  # 1. This function is automatically called to recompute the output\r\n  # 2. New caption is pushed back to the browser for re-display\r\n  #\r\n  # Note that because the data-oriented reactive expressions\r\n  # below don't depend on input$caption, those expressions are\r\n  # NOT called when input$caption changes\r\n  output$caption <- renderText({\r\n    input$caption\r\n  })\r\n\r\n  # Generate a summary of the dataset ----\r\n  # The output$summary depends on the datasetInput reactive\r\n  # expression, so will be re-executed whenever datasetInput is\r\n  # invalidated, i.e. whenever the input$dataset changes\r\n  output$summary <- renderPrint({\r\n    dataset <- datasetInput()\r\n    summary(dataset)\r\n\r\n  })\r\n\r\n  # Show the first \"n\" observations ----\r\n  # The output$view depends on both the databaseInput reactive\r\n  # expression and input$obs, so it will be re-executed whenever\r\n  # input$dataset or input$obs is changed\r\n  output$view <- renderTable({\r\n    head(datasetInput(), n = input$obs)\r\n  })\r\n\r\n}\r\n\r\n# Create Shiny app ----\r\nshinyApp(ui, server)\r\n\r\n\r\n","type":"text"}]
